{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/mozammal/Documents/Rhythmic_share/react-tracks-client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/mozammal/Documents/Rhythmic_share/react-tracks-client/src/index.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query {\\n    isLoggedIn @client\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Root from \"./Root\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { ApolloProvider, Query } from \"react-apollo\";\nimport ApolloClient, { gql } from \"apollo-boost\";\nimport Auth from \"./components/Auth\";\nvar client = new ApolloClient({\n  uri: \"http://localhost:8000/graphql/\",\n  fetchOptions: {\n    credentials: \"include\"\n  },\n  request: function request(operation) {\n    var token = localStorage.getItem(\"authToken\") || \"\";\n    operation.setContext({\n      headers: {\n        Authorization: \"JWT \".concat(token)\n      }\n    });\n  },\n  clientState: {\n    defaults: {\n      isLoggedIn: !!localStorage.getItem(\"authToken\")\n    }\n  }\n});\nvar IS_LOGGED_IN_QUERY = gql(_templateObject());\nReactDOM.render(React.createElement(ApolloProvider, {\n  client: client,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 34\n  },\n  __self: this\n}, React.createElement(Query, {\n  query: IS_LOGGED_IN_QUERY,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 35\n  },\n  __self: this\n}, function (_ref) {\n  var data = _ref.data;\n  return data.isLoggedIn ? React.createElement(Root, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }) : React.createElement(Auth, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  });\n})), document.getElementById(\"root\"));\nserviceWorker.unregister();","map":{"version":3,"sources":["/home/mozammal/Documents/Rhythmic_share/react-tracks-client/src/index.js"],"names":["React","ReactDOM","Root","serviceWorker","ApolloProvider","Query","ApolloClient","gql","Auth","client","uri","fetchOptions","credentials","request","operation","token","localStorage","getItem","setContext","headers","Authorization","clientState","defaults","isLoggedIn","IS_LOGGED_IN_QUERY","render","data","document","getElementById","unregister"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;AACA,SAASC,cAAT,EAAyBC,KAAzB,QAAsC,cAAtC;AACA,OAAOC,YAAP,IAAuBC,GAAvB,QAAkC,cAAlC;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,IAAMC,MAAM,GAAG,IAAIH,YAAJ,CAAiB;AAC9BI,EAAAA,GAAG,EAAE,gCADyB;AAE9BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,WAAW,EAAE;AADD,GAFgB;AAK9BC,EAAAA,OAAO,EAAE,iBAACC,SAAD,EAAe;AACtB,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,KAAqC,EAAnD;AACAH,IAAAA,SAAS,CAACI,UAAV,CAAqB;AACnBC,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,gBAASL,KAAT;AADN;AADU,KAArB;AAKD,GAZ6B;AAa9BM,EAAAA,WAAW,EAAE;AACXC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,UAAU,EAAE,CAAC,CAACP,YAAY,CAACC,OAAb,CAAqB,WAArB;AADN;AADC;AAbiB,CAAjB,CAAf;AAoBA,IAAMO,kBAAkB,GAAGjB,GAAH,mBAAxB;AAKAN,QAAQ,CAACwB,MAAT,CACE,oBAAC,cAAD;AAAgB,EAAA,MAAM,EAAEhB,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,oBAAC,KAAD;AAAO,EAAA,KAAK,EAAEe,kBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACG;AAAA,MAAGE,IAAH,QAAGA,IAAH;AAAA,SAAeA,IAAI,CAACH,UAAL,GAAkB,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAlB,GAA6B,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA5C;AAAA,CADH,CADF,CADF,EAMEI,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CANF;AASAzB,aAAa,CAAC0B,UAAd","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Root from \"./Root\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { ApolloProvider, Query } from \"react-apollo\";\nimport ApolloClient, { gql } from \"apollo-boost\";\nimport Auth from \"./components/Auth\";\nconst client = new ApolloClient({\n  uri: \"http://localhost:8000/graphql/\",\n  fetchOptions: {\n    credentials: \"include\",\n  },\n  request: (operation) => {\n    const token = localStorage.getItem(\"authToken\") || \"\";\n    operation.setContext({\n      headers: {\n        Authorization: `JWT ${token}`,\n      },\n    });\n  },\n  clientState: {\n    defaults: {\n      isLoggedIn: !!localStorage.getItem(\"authToken\"),\n    },\n  },\n});\n\nconst IS_LOGGED_IN_QUERY = gql`\n  query {\n    isLoggedIn @client\n  }\n`;\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <Query query={IS_LOGGED_IN_QUERY}>\n      {({ data }) => (data.isLoggedIn ? <Root /> : <Auth />)}\n    </Query>\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}